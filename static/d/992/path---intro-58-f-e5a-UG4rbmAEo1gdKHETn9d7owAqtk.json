{"data":{"markdownRemark":{"html":"<p>We, the developers, are always trying to write clean code and keep in mind that other developers will have to read through our code, understand it and able to work in it. </p>\n<p>We write documentation, we carefully choose our variable names to make it clear what that variable contains, we write clean functions and name the functions to best describe what its functionality is. How come we don't do the same for our end users, by writing accessible html so all of our users can use our site ?</p>\n<p>And what if you knew that <a href=\"https://www.worldbank.org/en/topic/disability\" target=\"_blank\" rel=\"nofollow\">1 billion people, or 15% of the worlds population</a>, experience some form of disabilities? Shouldn't this then be baked into our code?</p>\n<p>And what if I told you that accessible web is a basic human right?</p>\n<p>\"<em><a href=\"https://www.w3.org/standards/webdesign/accessibility\" target=\"_blank\" rel=\"nofollow\">The Web must be accessible to provide equal access and equal opportunity to people with diverse abilities. Indeed, the UN Convention on the Rights of Persons with Disabilities recognizes access to information and communications technologies, including the Web, as a basic human right.</a></em>\"</p>\n<h2>Under the hood</h2>\n<p>I wanted to dig deeper and really understand how accessibility works and how our code, our browser and screen readers work together.</p>\n<p>All browsers have an Accessibility API, which is built into the browser application. This Accessibility API exposes public properties and methods that can be queried by third party applications, such as screen readers, to retrieve information from the DOM. You can think about this like a hand shaking procedure between the screen reader and the browser</p>\n<p>Lets look at an example where you are the developer.\nYou want to check on your work and see if your site is accessible.\nAs you are tabbing through the page and hear or read the word \"link\" from your screen reader, you know that you are never using the word \"link\" in your code. The screen reader is conveying that the role of the anchor is a link.</p>\n<p>The Accessibility API is exposed to the role of the element in one of it's public properties or methods, which the screen reader queries as it renders the page in the Virtual Buffer. The screen reader reads that in the browser's opinion, the element is a link, so the screen reader reflects this element type in the Virtual buffer.</p>","frontmatter":{"path":"/intro","title":"Intro"}},"allMarkdownRemark":{"edges":[{"node":{"id":"9d83eb8c-14a3-54a7-b1c6-1910b01704d9","excerpt":"We, the developers, are always trying to write clean code and keep in mind that other developers will have to read through our code, understand it and able to work in it.  We write documentation, we carefully choose our variable names to make it…","frontmatter":{"date":"10","path":"/intro","title":"Intro"}}},{"node":{"id":"2bc8adf7-44fc-5906-b2fe-8cf5d7032162","excerpt":"This section is the basics, in that sense that this should already be a part of your website.  Skip navigation You can imagine if you were tabbing through a website and have to tab through the entire menu every single time you route to a new page…","frontmatter":{"date":"15","path":"/basic","title":"Basic"}}},{"node":{"id":"b40dcce8-4af6-5af2-b1b5-2c959138f616","excerpt":"WIP Labels and inputs: Well we have to connect the label to the input for screen readers and error messages. To do that you simply add a  for attribute to the  <label>  element and add the same one to the  <input>  element. Even if you don't want to…","frontmatter":{"date":"20","path":"/forms","title":"Forms"}}},{"node":{"id":"ed559586-875e-54e4-93b7-c3ea551c4d2a","excerpt":"alt tag Same old same old, but I think even the best developers miss this step. It's important for screen readers and people that use them, to have a descriptive text to get the same experience as other users.  If it's a decorative image then have it…","frontmatter":{"date":"30'","path":"/images","title":"Images"}}},{"node":{"id":"ccc937f2-dcb7-5447-b916-ebd264917fd2","excerpt":"'target= \" _ blank\"` To my surprise, screen readers don't give the information that links are  target=\"_blank\" . The user has no idea what happens if he clicks it. According to this article  https://thatdevgirl.com/blog/before-after-accessibility  we…","frontmatter":{"date":"40","path":"/links","title":"Links"}}},{"node":{"id":"c61b8811-51bd-5615-b250-cdd9ed8fce5f","excerpt":"WIP Few things to keep in mind : If the modal is not open, it should not be rendered in the DOM Try to set the modal at the and of  body . If you are using React you can use React Portals to append the modal to the end of  body Go over the WAI-ARIA…","frontmatter":{"date":"50","path":"/modal","title":"Modal dialog"}}},{"node":{"id":"50172349-1783-5086-a3a7-b16252e416dd","excerpt":"Tables is the most frustraiting thing that I code, but here below I think I've listed out every type of tables. Header cells Header cells must be marked with  <th> , and data cells with  <td>  to make tables accessible. For more complex tables…","frontmatter":{"date":"70","path":"/tables","title":"Tables"}}},{"node":{"id":"3d4d79c0-0295-5be5-bb20-19cc37ca9a33","excerpt":"Here is a list of tools to make it easy to guide you while you develop. List of tools Wave extension for chrome  allows you to evaluate web accessibility with a click of a button. This is awesome to check your local environment while you work on your…","frontmatter":{"date":"999'","path":"/tools","title":"Tools"}}}]}},"pageContext":{}}