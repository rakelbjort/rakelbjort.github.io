{"data":{"markdownRemark":{"html":"<p>We, the developers, who are always trying to write clean code and keep in mind that other developers will have to read through our code, have to understand it and able to work in it. We write documentation, we carefully choose our variable names to make it clear what our code does, we write clean functions and name the functions to best describe what it does. How come we don't do the same for our end users, by writing accessible html so all of our users can use our site ?</p>\n<h2>How??? Just how does this compute?</h2>\n<p>All browsers that support accessibility, include an Accessibility API that is built into the browser application. The browser's Accessibility API exposes public properties and methods that can be queried by third party application, like screen readers, to retrieve information from the DOM. This is like hand shaking procedure between the browser and the screen reader.\nthe screen reader also communicates back to the browser</p>\n<p>You as a developer, checking on your work, are tabbing through the page and hear or read the word \"link\", you as a developer know that you are never using the word \"link\" in your code. The screen reader is conveying that the role of the element is that of a link.</p>\n<p>The Accessibility API is exposed to the role of the element in one of it's public properties or methods, which the screen reader queries when it renders the page in the Virtual Buffer. The screen reader sees that, in the browser's opinion, the element is a link, so the screen reader reflects this element type in the Virtual buffer.</p>\n<p>So when we add ARIA to the page, the browser detects it and updates the information within its Accessibility API to reflect what the ARIA is supposed to convey.</p>\n<p>So all browser have an Accessibility APIs, which have different public properties and methods, and may require different techniques for accessing the browser's API and DOM. The same story goes for ARIA support within each browser, since this needs to be added to each Accessibility API in a consistent manner across all browsers.</p>\n<p><a href=\"https://reach.tech/router\">https://reach.tech/router</a></p>\n<p><a href=\"https://www.levelaccess.com/how-browsers-interact-with-screen-readers-and-where-aria-fits-in-the-mix/\">https://www.levelaccess.com/how-browsers-interact-with-screen-readers-and-where-aria-fits-in-the-mix/</a></p>\n<p><a href=\"https://simplyaccessible.com/article/accessible-name/\">https://simplyaccessible.com/article/accessible-name/</a></p>\n<p><a href=\"http://simplyaccessible.com/articles/\">http://simplyaccessible.com/articles/</a></p>\n<p><a href=\"https://www.w3.org/TR/core-aam-1.1/\">https://www.w3.org/TR/core-aam-1.1/</a>\n<a href=\"https://github.com/evcohen/eslint-plugin-jsx-a11y\">https://github.com/evcohen/eslint-plugin-jsx-a11y</a>\nve</p>\n<h2>Who is this Aria ?</h2>\n<p>Aria is a set of special acessibility attrubytes which can be added to any markup.</p>\n<p>Role attribute defines a specific role for type of object (such as an article, alert,slider or a button)</p>\n<p><code>aria-hidden</code> : attribute tells the screenreader if they should ignorethe element. This is not the same as using hidden element, which tells the browser not to display the element but the screen reader will read it</p>\n<h2>Forms</h2>\n<h3>Labels and inputs:</h3>\n<p>Well we have to connect the label to the input for screen readers and error messages. To do that you simply add a <code>for</code>attribute to the <code>&#x3C;label></code> element and add the same one to the <code>&#x3C;input></code> element. Even if you don't want to show the label (which you should avoid), you still have to have it in the code for the screen reader.</p>\n<p>Example :</p>\n<pre><code>&#x3C;label for=\"username\">Username&#x3C;/label>\n&#x3C;input id=\"username\" type=\"text\" name=\"username\" />\n</code></pre>\n<h2>Images</h2>\n<h3>alt tag</h3>\n<p>Same old same old, but I think even the best developers miss this step. It's important for screen readers and people that use them to have a descriptive text to get the same experience as other users. If it's a decorative image then have it empty,<code>alt=\"\"</code> or include them in the CSS instead.</p>\n<h2>Tables</h2>\n<h3>Header cells</h3>\n<p>Header cells must be marked with <code>&#x3C;th></code>, and data cells with <code>&#x3C;td></code> to make tables accessible. For more complex tables, explicit associations may be needed using <code>scope</code>, <code>id</code>and <code>headers</code>attributes.\n<a href=\"https://www.w3.org/WAI/tutorials/tables/\">https://www.w3.org/WAI/tutorials/tables/</a></p>\n<h3>Tables with one header</h3>\n<h4>Table with header cells in the top row only</h4>\n<p>If the table is fairly small and the data is distinctly different in each column (the relationship between the header and data cells are evident) then this is acceptable.</p>\n<pre><code>&#x3C;table>\n    &#x3C;tr>\n        &#x3C;th>Date&#x3C;/th>\n        &#x3C;th>What's happening?&#x3C;/th>\n        &#x3C;th>Where?&#x3C;/th>\n    &#x3C;/tr>\n    &#x3C;tr>\n        &#x3C;td>17 August&#x3C;/td>\n        &#x3C;td>Going to get coffee&#x3C;/td>\n        &#x3C;td>At a cat cafe!&#x3C;/td>\n    &#x3C;/tr>\n    […]\n&#x3C;/table>\n</code></pre>\n<h3>Table with header cells in the first column only</h3>\n<p>Now we are putting the header column on the left. Also in this situation, it is only acceptable to use this code because it is such a small table.</p>\n<pre><code>&#x3C;table>\n    &#x3C;tr>\n        &#x3C;th>Date&#x3C;/th>\n        &#x3C;td>1 April&#x3C;/td>\n        &#x3C;td>17 August&#x3C;/td>\n        &#x3C;td>20 April&#x3C;/td>\n    &#x3C;/tr>\n    &#x3C;tr>\n        &#x3C;th>What's happening?&#x3C;/th>\n        &#x3C;td>Going to get coffee&#x3C;/td>\n        &#x3C;td>Going for a run&#x3C;/td>\n        &#x3C;td>Going to get a tattoo!&#x3C;/td>\n    &#x3C;/tr>\n    &#x3C;tr>\n        &#x3C;th>Where ?&#x3C;/th>\n        &#x3C;td>At a cat cafe&#x3C;/td>\n        &#x3C;td>Outside&#x3C;/td>\n        &#x3C;td>In prison&#x3C;/td>\n    &#x3C;/tr>\n&#x3C;/table>\n</code></pre>\n<h3>Table with ambiguous data</h3>\n<p>Now we have data (first name, last name, city) that can't be distinguished from one another without knowing which header each corresponds to. The <code>scope</code> attribute with the value <code>col</code> defines the direction of the header cells and associates them with the corresponding data cells. The <code>scope</code> attribute is also needed for larger tables with one header row or column</p>\n<pre><code>&#x3C;table>\n  &#x3C;caption>Teddy bear collectors:&#x3C;/caption>\n  &#x3C;tr>\n    &#x3C;th scope=\"col\">Last Name&#x3C;/th>\n    &#x3C;th scope=\"col\">First Name&#x3C;/th>\n    &#x3C;th scope=\"col\">City&#x3C;/th>\n  &#x3C;/tr>\n  &#x3C;tr>\n    &#x3C;td>Bunny&#x3C;/td>\n    &#x3C;td>Bugs&#x3C;/td>\n    &#x3C;td>NY&#x3C;/td>\n  &#x3C;/tr>\n  &#x3C;tr>\n    &#x3C;td>Rabbit&#x3C;/td>\n    &#x3C;td>Peter&#x3C;/td>\n    &#x3C;td>Chicago&#x3C;/td>\n  &#x3C;/tr>\n  &#x3C;tr>\n    &#x3C;td>Rabbit&#x3C;/td>\n    &#x3C;td>Roger&#x3C;/td>\n    &#x3C;td>LA&#x3C;/td>\n  &#x3C;/tr>\n&#x3C;/table>\n</code></pre>\n<h3>Tables with two headers</h3>\n<p>For this type of tables we use the <code>&#x3C;ht></code>element to identify the header cells and the <code>scope</code>attribute to declare the direction of each header. The <code>scope</code>attribute can be set to <code>row</code> or <code>col</code> to denote the that a header applies to the entire row or column, respectively.</p>\n<p>Additionally, you can use the <code>&#x3C;caption></code>element to identify the table in a document. This is particularly useful for screen reader users browsing the web page in \"table mode\" where they can navigate from table to table.</p>\n<h4>Table with header cells in the top row and first column</h4>\n<p>All header cells are marked up as the <code>&#x3C;th></code>cells with <code>scope</code>attributes added.</p>\n<p>In the hader row, the <code>col</code>value for <code>scope</code>associates each header cells with the data cells in the column. In the header column, the <code>row</code>calue associates the individual headers with their rows.\nWithout this information, some users would not easily understand the relationship between header and data cells</p>\n<pre><code>&#x3C;table>\n  &#x3C;caption>Delivery slots:&#x3C;/caption>\n  &#x3C;tr>\n    &#x3C;td>&#x3C;/td>\n    &#x3C;th scope=\"col\">Monday&#x3C;/th>\n    &#x3C;th scope=\"col\">Tuesday&#x3C;/th>\n    &#x3C;th scope=\"col\">Wednesday&#x3C;/th>\n    &#x3C;th scope=\"col\">Thursday&#x3C;/th>\n    &#x3C;th scope=\"col\">Friday&#x3C;/th>\n  &#x3C;/tr>\n  &#x3C;tr>\n    &#x3C;th scope=\"row\">09:00 - 11:00&#x3C;/th>\n    &#x3C;td>Closed&#x3C;/td>\n    &#x3C;td>Open&#x3C;/td>\n    &#x3C;td>Open&#x3C;/td>\n    &#x3C;td>Closed&#x3C;/td>\n    &#x3C;td>Closed&#x3C;/td>\n  &#x3C;/tr>\n  &#x3C;tr>\n    &#x3C;th scope=\"row\">11:00 - 13:00&#x3C;/th>\n    &#x3C;td>Open&#x3C;/td>\n    &#x3C;td>Open&#x3C;/td>\n    &#x3C;td>Closed&#x3C;/td>\n    &#x3C;td>Closed&#x3C;/td>\n    &#x3C;td>Closed&#x3C;/td>\n  &#x3C;/tr>\n  […]\n&#x3C;/table>\n</code></pre>\n<h4>Table with an offset column of header cells</h4>\n<p>In this example the row header cells are in the second rather than in the first column.</p>\n<p>The scope of the header cells in the top row is set to <code>col</code>. By using the <code>row</code>value for <code>scope</code> assigns the header cells in the second column to the data cells on the left and the right of the individual header cell.</p>\n<pre><code>[…]\n&#x3C;tr>\n  &#x3C;td>215&#x3C;/td>\n  &#x3C;th scope=\"row\">Abel&#x3C;/th>\n  &#x3C;td>5&#x3C;/td>\n  &#x3C;td>2&#x3C;/td>\n  &#x3C;td>0&#x3C;/td>\n  &#x3C;td>0&#x3C;/td>\n  &#x3C;td>0&#x3C;/td>\n  &#x3C;td>3&#x3C;/td>\n&#x3C;/tr>\n[…]\n</code></pre>\n<h3>Tables with irregular headers</h3>\n<p>These examples are with header cells that span multiple columns and/or rows. Several elements and attributes can be used to degine the structure and relationships of the header and data cells.</p>\n<p>For example, a header cell that spans three columns should be associated with corresponding data cells in the column group. This can be done by setting the <code>scope</code>attribute of the header cell to the value <code>colgroup</code>. The same principle applies to header cells spanning multiple rows. In this case, they are associated with by using the value <code>rowgroup</code>in the <code>scope</code>attribute.</p>\n<p>However, before making these associations, the structure of such groups of columns and rows needs to be defined in the table markup:</p>\n<ul>\n<li>A column group is defined using the <code>&#x3C;colgroup></code>element.</li>\n<li>A row group is defined by the <code>&#x3C;thead></code>, <code>&#x3C;tfoot></code> and <code>&#x3C;tbody></code> elements.</li>\n<li><code>&#x3C;thead></code> and <code>&#x3C;tfoot></code> elements can be used once in a table.</li>\n<li>A table can have any number of <code>&#x3C;tbody></code> elements that each defines a row group.</li>\n</ul>\n<h3>Table with two tier headers</h3>\n<p>Here there are two pairs of column headers. Each pair of column headers, \"Produced\" and \"Sold\" is associated with a first-level header that identifies the pair: \"Mars\" and \"Venus\". These first-level headers are made to span two columns by using the <code>colspan</code> element instead of that number of <code>&#x3C;col></code>elements, and the number of columns spanned is noted in the <code>span</code> attribute.</p>\n<p>Also, the value of the <code>scope</code> attribute in the first-level headers is set to <code>colgroup</code>so that it is associated with the entire group of columns. The second-level headers only apply to the corresponding column, so the <code>scope</code> attribute is set to <code></code>col`</p>\n<h2>Links</h2>\n<h3><code>target= \"_blank\"</code></h3>\n<p>To my surprise, screen readers don't give the information that links are <code>target=\"_blank\"</code>. The user has no idea what happens if he clicks it. According to this article <a href=\"https://thatdevgirl.com/blog/before-after-accessibility\">https://thatdevgirl.com/blog/before-after-accessibility</a> we can use the <code>::after</code> or <code>::before</code> element to tell the user that this link opens a new tab.</p>\n<p>This is done by adding the <code>content: 'Opens in new tab'</code>, so simple, you can add it to your global style sheet for all links that have <code>target= \"_blank\"</code>.\nBut keep in mind that means that all content in <code>::after</code>and <code>::before</code>element</p>\n<h2>Skip navigation</h2>\n<p>You can imagine if you were going through a website and have to go through the menu everytime, you would get frustrated. That's why we put in \"Skip the navigation and go straight to the main content\" link. This link should be on the first tab on the page. Some site have nice animation on tab, that it scrolls in and all users can see what the link is for.</p>\n<h2>Ensure that all interactive elements are keyboard accessible.</h2>\n<p>Always....ALWAYS think about the users that use keyboard to navigate the page. They are more of them then you relize. Keep this in mind when you are developing the navigation, don't have any mouse over information that you can't access through the keyboard, accordions, media player...</p>\n<p>Use <code>tabindex=0</code> to add an element that does not normally receive focus, such as <code>&#x3C;div></code>or <code>&#x3C;span></code>, into the navigation order when it is being used for interaction. Use scripting to capture and respond to keyboard events.</p>\n<h2>Page language</h2>\n<p>Indicate the primary language of every page by suing the <code>lang</code>attribute in the <code>html</code> tag, for example <code>&#x3C;html lang=\"en\"></code>. This is important for users that use google translate. The translation does not work if this is marked wrong.</p>\n<h2>Write codethat adapts to the user's technology</h2>\n<p>Keep in mind that some users have to blow up the size of the text to 200%, then it's our job that we don't have horizontal scroll and we have to prevent any clipping of content. Use progressive enhancement to help ensure that core functionality and content is available regardless of technology being used.</p>\n<h2>Avoid CAPTCHA where possible.</h2>\n<p>Captcha create problems for many people. There are other means of verifying that user input was generated by a human that are easier to use, such as automatic detection or interface interactions. If CAPTCHA really needs to be included, ensure that it is simple to understand and includes alternatives for users with disabilities,such as :</p>\n<ul>\n<li>Providing more than two ways to solve the CAPTCHA</li>\n<li>Providing access to a human representative who can bypass CAPTCHA</li>\n<li>Not requireing CAPTHAs for authorized users.</li>\n</ul>\n<h2>Modal dialog</h2>\n<p>Few things to keep in mind :</p>\n<ul>\n<li>If the modal is not open, it should not be rendered in the DOM</li>\n<li>Try to set the modal at the and of <code>body</code>. If you are using React you can use React Portals to append the modal to the end of <code>body</code></li>\n<li>Go over the WAI-ARIA attrubutes</li>\n<li>If the user presses the escape button while the modal is ope, it closes it</li>\n<li>Clicking outside the modal, closes the modal.</li>\n<li>When the user opens the modal, the user can't scroll</li>\n<li>When the user opens the modal the focus goes straight to the modal's close button?</li>\n<li>Focus stays within the modal while the modal is open. That means the user can't tab pass the modal window to the body.</li>\n</ul>\n<h2>Athuga</h2>\n<ul>\n<li>Skoða hvernig css order gerir, beinir það screen reader í rétt átt ?</li>\n<li>This is particularly useful for screen reader users browsing the web page in \"table mode\", Hvað er table mode ?</li>\n</ul>\n<p>NOT GOOD : <a href=\"https://github.com/storybooks/storybook/blob/master/addons/a11y/README.md\">https://github.com/storybooks/storybook/blob/master/addons/a11y/README.md</a>\nAccepts empty link</p>\n<p>Modal pop up : <a href=\"https://bitsofco.de/accessible-modal-dialog/\">https://bitsofco.de/accessible-modal-dialog/</a></p>\n<p><a href=\"https://assortment.io/posts/accessible-modal-component-react-portals-part-2\">https://assortment.io/posts/accessible-modal-component-react-portals-part-2</a></p>\n<p><a href=\"https://medium.com/digital-leaders-uk/accessibility-within-organisations-why-and-how-do-you-align-your-workforce-da1fbcedc4ab\">https://medium.com/digital-leaders-uk/accessibility-within-organisations-why-and-how-do-you-align-your-workforce-da1fbcedc4ab</a></p>\n<p>Accessibility tree chrome : <a href=\"https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree\">https://developers.google.com/web/fundamentals/accessibility/semantics-builtin/the-accessibility-tree</a>\n<a href=\"https://www.w3.org/TR/core-aam-1.1/#intro_treetypes\">https://www.w3.org/TR/core-aam-1.1/#intro_treetypes</a></p>","frontmatter":{"path":"/tewt","title":"tewt"}},"allMarkdownRemark":{"edges":[{"node":{"id":"305d2b2a-5015-5561-95ac-17d99f60d49f","excerpt":"We, the developers, who are always trying to write clean code and keep in mind that other developers will have to read through our code, have to understand it and able to work in it. We write documentation, we carefully choose our variable names to…","frontmatter":{"date":"November 07, 2017","path":"/intro","title":"Intro"}}},{"node":{"id":"2d5db9d5-1360-50ed-a2a5-8c86e5c10a14","excerpt":"We, the developers, who are always trying to write clean code and keep in mind that other developers will have to read through our code, have to understand it and able to work in it. We write documentation, we carefully choose our variable names to…","frontmatter":{"date":"November 07, 2017","path":"/tewt","title":"tewt"}}}]}},"pageContext":{}}