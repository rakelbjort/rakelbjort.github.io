{"data":{"markdownRemark":{"html":"<p>This section is the basics, in that sense that this should already be a part of your website. </p>\n<h2>Skip navigation</h2>\n<p>You can imagine if you were tabbing through a website and have to tab through the entire menu every single time you route to a new page, you would get frustrated. </p>\n<p>This is the reason we put in \"Skip the navigation and go straight to the main content\" link at the top of the page.  Some sites have nice animations on tab and for me that indicates that the company which developed the site cares about all their end users. Oh, like this site! Try tabbing!</p>\n<h2>Ensure that all interactive elements are keyboard accessible.</h2>\n<p>Always...ALWAYS think about the users that use keyboard to navigate the page. There are more of them then you realise. Keep this in mind when you are developing that there is no additional information for the <code>:hover</code> effect.</p>\n<h2>Page language</h2>\n<p>Indicate the primary language of every page by using the <code>lang</code> attribute in the <code>html</code> tag, for example <code>&#x3C;html lang=\"en\"></code>. This is important for users that use google translate. The translation does not work if this is wrongly marked.</p>\n<h2>Write code that adapts to the user's technology</h2>\n<p>Keep in mind that some users have to blow up the size of the text to 200%. In these cases it is our job that there isn't any horizontal scroll and we have to prevent any clipping of content. Use progressive enhancement to help ensure that core functionality and content is available regardless of the technology being used.</p>\n<h2>Avoid CAPTCHA where possible.</h2>\n<p>Captcha creates problems for many people. There are other ways of verifying that user input was generated by a human that are easier to use, such as automatic detection or interface interactions. If CAPTCHA really needs to be included, ensure that it is simple to understand and includes alternatives for users with disabilities, such as:</p>\n<ul>\n<li>Providing more than two ways to solve the CAPTCHA</li>\n<li>Providing access to a human representative who can bypass CAPTCHA</li>\n<li>Not requiring CAPTHAs for authorized users</li>\n</ul>","frontmatter":{"path":"/basic","title":"Basic"}},"allMarkdownRemark":{"edges":[{"node":{"id":"9d83eb8c-14a3-54a7-b1c6-1910b01704d9","excerpt":"We, the developers, are always trying to write clean code and keep in mind that other developers will have to read through our code, understand it and able to work in it.  We write documentation, we carefully choose our variable names to make it…","frontmatter":{"date":"10","path":"/intro","title":"Intro"}}},{"node":{"id":"2bc8adf7-44fc-5906-b2fe-8cf5d7032162","excerpt":"This section is the basics, in that sense that this should already be a part of your website.  Skip navigation You can imagine if you were tabbing through a website and have to tab through the entire menu every single time you route to a new page…","frontmatter":{"date":"15","path":"/basic","title":"Basic"}}},{"node":{"id":"b40dcce8-4af6-5af2-b1b5-2c959138f616","excerpt":"WIP Labels and inputs: Well we have to connect the label to the input for screen readers and error messages. To do that you simply add a  for attribute to the  <label>  element and add the same one to the  <input>  element. Even if you don't want to…","frontmatter":{"date":"20","path":"/forms","title":"Forms"}}},{"node":{"id":"ed559586-875e-54e4-93b7-c3ea551c4d2a","excerpt":"alt tag Same old same old, but I think even the best developers miss this step. It's important for screen readers and people that use them, to have a descriptive text to get the same experience as other users.  If it's a decorative image then have it…","frontmatter":{"date":"30'","path":"/images","title":"Images"}}},{"node":{"id":"ccc937f2-dcb7-5447-b916-ebd264917fd2","excerpt":"'target= \" _ blank\"` To my surprise, screen readers don't give the information that links are  target=\"_blank\" . The user has no idea what happens if he clicks it. According to this article  https://thatdevgirl.com/blog/before-after-accessibility  we…","frontmatter":{"date":"40","path":"/links","title":"Links"}}},{"node":{"id":"c61b8811-51bd-5615-b250-cdd9ed8fce5f","excerpt":"WIP Few things to keep in mind : If the modal is not open, it should not be rendered in the DOM Try to set the modal at the and of  body . If you are using React you can use React Portals to append the modal to the end of  body Go over the WAI-ARIA…","frontmatter":{"date":"50","path":"/modal","title":"Modal dialog"}}},{"node":{"id":"50172349-1783-5086-a3a7-b16252e416dd","excerpt":"Tables is the most frustraiting thing that I code, but here below I think I've listed out every type of tables. Header cells Header cells must be marked with  <th> , and data cells with  <td>  to make tables accessible. For more complex tables…","frontmatter":{"date":"70","path":"/tables","title":"Tables"}}},{"node":{"id":"3d4d79c0-0295-5be5-bb20-19cc37ca9a33","excerpt":"Here is a list of tools to guide you while you develop and helps you keep an eye on your project. Wave extension for chrome  allows you to evaluate web accessibility with a click of a button. This is awesome to check your local environment while you…","frontmatter":{"date":"999'","path":"/tools","title":"Tools"}}}]}},"pageContext":{}}