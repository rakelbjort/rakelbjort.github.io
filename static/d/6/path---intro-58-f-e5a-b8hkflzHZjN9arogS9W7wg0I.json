{"data":{"markdownRemark":{"html":"<p>We, the developers, are always trying to write clean code and keep in mind that other developers will have to read through our code, understand it and able to work in it. </p>\n<p>We write documentation, we carefully choose our variable names to make it clear what that variable contains, we write clean functions and name the functions to best describe what its functionality is. How come we don't do the same for our end users, by writing accessible html so all of our users can use our site ?</p>\n<p>And what if you knew that <a href=\"https://www.worldbank.org/en/topic/disability\">1 billion people, or 15% of the worlds population</a>, experience some form of disabilities? Shouldn't this then be baked into our code?</p>\n<p>And what if I told you that accessible web is a basic human right?</p>\n<p>\"<em><a href=\"https://www.w3.org/standards/webdesign/accessibility\">The Web must be accessible to provide equal access and equal opportunity to people with diverse abilities. Indeed, the UN Convention on the Rights of Persons with Disabilities recognizes access to information and communications technologies, including the Web, as a basic human right.</a></em>\"</p>\n<h2>How??? Just how does this compute?</h2>\n<p>I wanted to dig deeper and really understand how accessibility works and how our code, our browser and screen readers work together.</p>\n<p>All browsers, that support accessibility, have an Accessibility API, which isbuilt into the browser application. This Accessibility API exposes public properties and methods that can be queried by third party application, such as screen readers, to retrieve information from the DOM. You can think about this like a hand shaking procedure between the screen reader and the broswer</p>\n<p>Lets look at an example where you are the developer.\nYou want to check on your work and see if your site is accessible.\nAs you are tabbing through the page and hear or read the word \"link\" from your screen reader, you know that you are never using the word \"link\" in your code. The screen reader is conveying that the role of the element that you code as a link.</p>\n<p>The Accessibility API is exposed to the role of the element in one of it's public properties or methods, which the screen reader queries when it renders the page in the Virtual Buffer. The screen reader sees that, in the browser's opinion, the element is a link, so the screen reader reflects this element type in the Virtual buffer.</p>\n<p>So when we add ARIA to the page, the browser detects it and updates the information within its Accessibility API to reflect what the ARIA is supposed to convey.</p>\n<p>So all browser have an Accessibility APIs, which have different public properties and methods, and may require different techniques for accessing the browser's API and DOM. The same story goes for ARIA support within each browser, since this needs to be added to each Accessibility API in a consistent manner across all browsers.</p>\n<h2>Who is this Aria ?</h2>\n<p>Aria is a set of special acessibility attrubytes which can be added to any markup.</p>\n<p>Role attribute defines a specific role for type of object (such as an article, alert,slider or a button)</p>\n<p><code>aria-hidden</code> : attribute tells the screenreader if they should ignorethe element. This is not the same as using hidden element, which tells the browser not to display the element but the screen reader will read it</p>","frontmatter":{"path":"/intro","title":"Intro"}},"allMarkdownRemark":{"edges":[{"node":{"id":"9d83eb8c-14a3-54a7-b1c6-1910b01704d9","excerpt":"We, the developers, are always trying to write clean code and keep in mind that other developers will have to read through our code, understand it and able to work in it.  We write documentation, we carefully choose our variable names to make it…","frontmatter":{"date":"10","path":"/intro","title":"Intro"}}},{"node":{"id":"2bc8adf7-44fc-5906-b2fe-8cf5d7032162","excerpt":"Skip navigation You can imagine if you were going through a website and have to go through the menu everytime, you would get frustrated. That's why we put in \"Skip the navigation and go straight to the main content\" link. This link should be on the…","frontmatter":{"date":"15","path":"/basic","title":"Basic"}}},{"node":{"id":"b40dcce8-4af6-5af2-b1b5-2c959138f616","excerpt":"Labels and inputs: Well we have to connect the label to the input for screen readers and error messages. To do that you simply add a  for attribute to the  <label>  element and add the same one to the  <input>  element. Even if you don't want to show…","frontmatter":{"date":"20","path":"/forms","title":"Forms"}}},{"node":{"id":"ed559586-875e-54e4-93b7-c3ea551c4d2a","excerpt":"alt tag Same old same old, but I think even the best developers miss this step. It's important for screen readers and people that use them to have a descriptive text to get the same experience as other users. If it's a decorative image then have it…","frontmatter":{"date":"30'","path":"/images","title":"Images"}}},{"node":{"id":"ccc937f2-dcb7-5447-b916-ebd264917fd2","excerpt":"'target= \" _ blank\"` To my surprise, screen readers don't give the information that links are  target=\"_blank\" . The user has no idea what happens if he clicks it. According to this article  https://thatdevgirl.com/blog/before-after-accessibility  we…","frontmatter":{"date":"40","path":"/links","title":"Links"}}},{"node":{"id":"c61b8811-51bd-5615-b250-cdd9ed8fce5f","excerpt":"Few things to keep in mind : If the modal is not open, it should not be rendered in the DOM Try to set the modal at the and of  body . If you are using React you can use React Portals to append the modal to the end of  body Go over the WAI-ARIA…","frontmatter":{"date":"50","path":"/modal","title":"Modal dialog"}}},{"node":{"id":"50172349-1783-5086-a3a7-b16252e416dd","excerpt":"Header cells Header cells must be marked with  <th> , and data cells with  <td>  to make tables accessible. For more complex tables, explicit associations may be needed using  scope ,  id and  headers attributes.\n https://www.w3.org/WAI/tutorials…","frontmatter":{"date":"70","path":"/tables","title":"Tables"}}}]}},"pageContext":{}}