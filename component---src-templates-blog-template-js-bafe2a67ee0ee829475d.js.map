{"version":3,"sources":["webpack:///./src/templates/blogTemplate.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SidebarNavigation/index.js","webpack:///./src/components/Header/index.js","webpack:///./src/templates/Layout/index.js","webpack:///./src/components/PostLink/index.js"],"names":["Template","render","_this$props$data","this","props","data","page","markdownRemark","Posts","allMarkdownRemark","edges","filter","edge","node","frontmatter","date","map","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","_components_PostLink__WEBPACK_IMPORTED_MODULE_6__","key","id","post","_Layout__WEBPACK_IMPORTED_MODULE_5__","links","react_helmet__WEBPACK_IMPORTED_MODULE_4___default","title","className","baseline","dangerouslySetInnerHTML","__html","html","Component","pageQuery","__webpack_require__","r","__webpack_exports__","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","React","createContext","Consumer","staticQueryData","query","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","ProdPageRenderer","_ref","location","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","Object","assign","json","shape","SidebarNavigation","react_default","item","gatsby_browser_entry","path","to","Header","siteTitle","Layout","Fragment","href","Helmet_default","site","siteMetadata","meta","name","content","lang","src_components_Header","src_components_SidebarNavigation","_755544856","gatsby__WEBPACK_IMPORTED_MODULE_1__","PostLink"],"mappings":"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","file":"component---src-templates-blog-template-js-bafe2a67ee0ee829475d.js","sourcesContent":["import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport Layout from './Layout'\nimport PostLink from '../components/PostLink'\n\nclass Template extends Component {\n  render() {\n    const {\n      markdownRemark: page,\n      allMarkdownRemark: { edges },\n    } = this.props.data\n    const Posts = edges\n      .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\n      .map(edge => <PostLink key={edge.node.id} post={edge.node} />)\n\n    return (\n      <Layout links={Posts}>\n        <Helmet\n          title={` ${page.frontmatter.title} | Accessibility awesome |`}\n        />\n        <div className=\"page\">\n          <header>\n            <h1 className=\"page-title\">{page.frontmatter.title}</h1>\n            <span>{page.frontmatter.baseline}</span>\n          </header>\n          <div dangerouslySetInnerHTML={{ __html: page.html }} />\n        </div>\n      </Layout>\n    )\n  }\n}\nexport default Template\nexport const pageQuery = graphql`\n  query DocsByPath($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      frontmatter {\n        path\n        title\n      }\n    }\n\n    allMarkdownRemark(sort: { order: ASC, fields: [frontmatter___date] }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 250)\n          frontmatter {\n            date\n            path\n            title\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import React, { Component } from 'react'\nimport { Link } from 'gatsby'\n\nimport './index.scss'\n\nclass SidebarNavigation extends Component {\n  render() {\n    return (\n      <aside>\n        <nav className=\"sidebar-navigation\">\n          <h1>Table of contents</h1>\n          {this.props.data &&\n            this.props.data.map(item => (\n              <Link\n                key={item.props.post.frontmatter.path}\n                className=\"sidebar-link\"\n                to={item.props.post.frontmatter.path}\n              >\n                {item.props.post.frontmatter.title}\n              </Link>\n            ))}\n        </nav>\n      </aside>\n    )\n  }\n}\n\nexport default SidebarNavigation\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport './index.scss'\n\nconst Header = ({ siteTitle }) => (\n  <nav className=\"navigation-main\">\n    <Link className=\"navigation-link\" to=\"/\">\n      Home\n    </Link>\n    <Link className=\"navigation-link\" to=\"/tools\">\n      Tools\n    </Link>\n    <Link className=\"navigation-link\" to=\"/intro\">\n      Intro\n    </Link>\n  </nav>\n)\n\nexport default Header\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\nimport SidebarNavigation from '../../components/SidebarNavigation'\nimport Header from '../../components/Header'\nimport './index.scss'\n\nconst Layout = ({ children, links }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <a href=\"#main-content\" className=\"skip-to-content\">\n          Skip to the navigation\n        </a>\n        <Helmet\n          title={data.site.siteMetadata.title}\n          meta={[\n            { name: 'description', content: 'Sample' },\n            { name: 'keywords', content: 'sample, something' },\n          ]}\n        >\n          <html lang=\"en\" />\n        </Helmet>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <div className=\"container\">\n          <SidebarNavigation data={links} />\n          <div className=\"main-content\" id=\"main-content\">\n            {children}\n          </div>\n        </div>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nconst PostLink = ({ post }) => (\n  <div>\n    <Link to={post.frontmatter.path}>{post.frontmatter.title}</Link>\n  </div>\n)\n\nexport default PostLink\n"],"sourceRoot":""}